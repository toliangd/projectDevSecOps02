/*
Определение конвейера через классический пользовательский интерфейс удобно для тестирования фрагментов кода конвейера
или для обработки простых конвейеров или конвейеров, которые не требуют извлечения / клонирования исходного кода
из репозитория. Как упоминалось выше, в отличие от Jenkinsfiles, которые вы определяете через Blue Ocean ( выше )
или в системе управления версиями ( ниже ), Jenkinsfiles, введенные в область текстовой области Script проектов
Pipeline, хранятся самим Jenkins в домашнем каталоге Jenkins. Поэтому для большего контроля и гибкости
вашего конвейера, особенно для проектов в системе управления версиями, которые могут стать более сложными
, рекомендуется использовать Blue Ocean или систему управления версиями для определения вашего Jenkinsfile.
*/

pipeline {      // В нее мы оборачиваем наш код.
    agent any   // указывает Jenkins выделить исполнителя (на любом доступном агенте / узле в среде Jenkins) и рабочую область для всего конвейера.
     	        // node - фактически делает то же самое, что и agent(выше).
    environment {
        registry = 'tolikgd/microblog' //надо заменять
        registryCred = 'dockerhub'
        CRED = credentials('docker-p')
        sonar = credentials('sonar')
    }


    stages {
        stage ('branch_name') {
            steps {
                script {
                    echo env.GIT_BRANCH
                }
            }
        }
        stage ('when,parallel') {
            when {
                    branch 'test'
                    //triggeredBy 'TimerTrigger'
                }
            parallel {
                stage ('input') {
                    steps {
                        script {
                            env.decision = input message: 'Please enter the decision (yes/no)',
                                                 parameters: [string(defaultValue: '',
                                                 description: '',
                                                 name: 'decision')]
                            if (env.branch == 'yes') {
                                echo 'wooooooooooooooooooooooooooooooooh'
                            }
                        }
                    }
                }
                stage ('echo parallel input') {
                    steps {
                        sh '''
                            echo 'проверка параллельной работы'
                            '''
                    }
                }
            }
        }

        stage('pass') {
            agent {node{label 'master'}}
            steps {
                sh ('echo ${CRED}')
            }
        }
        stage('Scan agent master') {
            agent {node {label 'master'}}
            steps {
                  sh '''
                    lynis audit system >> ./lynis-stdout.log
                  '''
            }
        }
        stage('Scan agent Docker') {
            agent {node {label 'docker'}}
            steps {
                sh '''
                echo 'scan...'
                '''
            }
        }
        stage('sonarQube') {
        agent {node {label 'docker'}}
            steps {
                script {
                    withSonarQubeEnv('sq1') { // If you have configured more than one global server connection, you can specify its name
                        sh '''/home/tolik/sonar/sonar-scanner-4.6.2.2472-linux/bin/sonar-scanner   -Dsonar.projectKey=sq1   -Dsonar.sources=.   -Dsonar.host.url=http://10.15.20.20:9000   -Dsonar.login=${sonar}'''
                    }
                }
            }
        }
        stage('test') {
            agent {node {label 'master'}}
            steps {
                sh 'docker info'
            }
        }
        stage('Сборка, отправка и зачистка') {
            agent {node {label 'master'}}
            when { // если условие в {} верно, то выполняем steps{}
                anyOf { // любое из указанных условий верно, allOf - все условия верны
                    branch 'test'
                }
            }
            steps {
                sh '''
                    lynis audit dockerfile Dockerfile >> ./lynis-stdout-Docker.log
                '''
                script {
                    dockerImage = docker.build registry + ":$BUILD_NUMBER"
                    docker.withRegistry('', registryCred) {
                    dockerImage.push()
                    }
                    sh 'docker rmi $registry:$BUILD_NUMBER'
                }
            }
        }
        stage('Тестирование_trivy') {
            agent {node {label 'master'}}
            steps {
                sh '''
                touch rezult-trivy-$BUILD_NUMBER
                docker run aquasec/trivy $registry:$BUILD_NUMBER >> rezult-trivy-$BUILD_NUMBER
                '''
                //sh 'CRITICAL=$(cat rezult-trivy-$BUILD_NUMBER | grep CRITICAL | wc -l); echo "$CRITICAL"; if [[ $CRITICAL -gt 0 ]]; then exit 1; fi'
            }
        }
        stage('Тестирование_grype') {
            agent {node {label 'docker'}}
            steps {
                sh '''
                touch rezult-grype-$BUILD_NUMBER
                grype $registry:$BUILD_NUMBER --scope all-layers >> rezult-grype-$BUILD_NUMBER
                '''
                //sh 'CRITICAL=$(cat rezult-grype-$BUILD_NUMBER | grep CRITICAL | wc -l); echo "$CRITICAL"; if [[ $CRITICAL -gt 0 ]]; then exit 1; fi'
            }
        }
        stage('Разветрывание') {
            steps {
                echo 'Развертывание'
            }
        }
    }
}
